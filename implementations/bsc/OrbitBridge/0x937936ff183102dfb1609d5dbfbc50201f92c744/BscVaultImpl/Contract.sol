{"BscVault.impl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\nimport \"./Vault.storage.sol\";\n\nlibrary SafeMath {\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c \u003c a) return (false, 0);\n        return (true, c);\n    }\n    \n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b \u003e a) return (false, 0);\n        return (true, a - b);\n    }\n    \n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003e 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003c= a, errorMessage);\n        return a - b;\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a / b;\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b \u003e 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size \u003e 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length \u003e 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IGovernance {\n    function required() external view returns(uint);\n    function getOwners() external view returns(address[] memory);\n    function isOwner(address owner) external view returns(bool);\n}\n\ninterface IFarm {\n    function deposit(uint amount) external;\n    function withdrawAll() external;\n    function withdraw(address toAddr, uint amount) external;\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\n\ninterface IERC721 {\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n    function transferFrom(address from, address to, uint256 tokenId) external;\n    function approve(address to, uint256 tokenId) external;\n    function getApproved(uint256 tokenId) external view returns (address operator);\n    function setApprovalForAll(address operator, bool _approved) external;\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\ninterface IProxy {\n    function owner() external view returns (address);\n    function getChain() external view returns (string memory);\n    function getAdmin() external view returns (address);\n    function getImplementation() external view returns (address);\n}\n\nlibrary LibCallBridgeReceiver {\n    event BridgeReceiverResult(bool success, address fromAddress, address tokenAddress, bytes data);\n    \n    function callReceiver(bool isFungible, uint gasLimitForBridgeReceiver, address tokenAddress, uint256 _int, bytes memory data, address toAddr, address fromAddr) internal {\n        bool result;\n        bytes memory callbytes;\n        if (isFungible) {\n            callbytes = abi.encodeWithSignature(\"onTokenBridgeReceived(address,uint256,bytes)\", tokenAddress, _int, data);\n        } else {\n            callbytes = abi.encodeWithSignature(\"onNFTBridgeReceived(address,uint256,bytes)\", tokenAddress, _int, data);\n        }\n        if (gasLimitForBridgeReceiver \u003e 0) {\n            (result, ) = toAddr.call{gas : gasLimitForBridgeReceiver}(callbytes);\n        } else {\n            (result, ) = toAddr.call(callbytes);\n        }\n        emit BridgeReceiverResult(result, fromAddr, tokenAddress, data);\n    }\n}\n\ncontract BscVaultImpl is VaultStorage {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    event Deposit(string toChain, address fromAddr, bytes toAddr, address token, uint8 decimal, uint amount, uint depositId, bytes data);\n    event DepositNFT(string toChain, address fromAddr, bytes toAddr, address token, uint tokenId, uint amount, uint depositId, bytes data);\n\n    event Withdraw(string fromChain, bytes fromAddr, bytes toAddr, bytes token, bytes32[] bytes32s, uint[] uints, bytes data);\n    event WithdrawNFT(string fromChain, bytes fromAddr, bytes toAddr, bytes token, bytes32[] bytes32s, uint[] uints, bytes data);\n\n    event BridgeReceiverResult(bool success, address fromAddress, address tokenAddress, bytes data);\n    \n    constructor() public payable {\n    }\n    \n    modifier onlyGovernance {\n        if (msg.sender == governance_()) {\n            _;\n        }\n    }\n\n    modifier onlyActivated {\n        require(isActivated);\n        _;\n    }\n\n    function admin_() public view returns (address) {\n        return IProxy(address(this)).getAdmin();\n    }\n\n    function governance_() public view returns (address) {\n        return IProxy(admin_()).owner();\n    }\n\n    function getVersion() public pure returns(string memory){\n        return \"BscVault20210506\";\n    }\n\n    function setChainSymbol(string memory _chain) public onlyGovernance {\n        chain = _chain;\n    }\n\n    function changeActivate(bool activate) public onlyGovernance {\n        isActivated = activate;\n    }\n\n    function getChainId(string memory chainSymbol) public view returns(bytes32){\n        return sha256(abi.encodePacked(address(this), chainSymbol));\n    }\n\n    function setValidChain(string memory chainSymbol, bool valid) public onlyGovernance {\n        isValidChain[getChainId(chainSymbol)] = valid;\n    }\n\n    function setParams(uint _taxRate, address _taxReceiver, uint _gasLimitForBridgeReceiver) public onlyGovernance {\n        require(_taxRate \u003c 10000);\n        require(_taxReceiver != address(0));\n        taxRate = _taxRate;\n        taxReceiver = _taxReceiver;\n        gasLimitForBridgeReceiver = _gasLimitForBridgeReceiver;\n    }\n\n    function addFarm(address token, address payable proxy) public onlyGovernance {\n        require(farms[token] == address(0));\n\n        uint amount;\n        if(token == address(0)){\n            amount = address(this).balance;\n        }\n        else{\n            amount = IERC20(token).balanceOf(address(this));\n        }\n        \n        _transferToken(token, proxy, amount);\n        IFarm(proxy).deposit(amount);\n\n        farms[token] = proxy;\n    }\n\n    function removeFarm(address token, address payable newProxy) public onlyGovernance {\n        require(farms[token] != address(0));\n\n        IFarm(farms[token]).withdrawAll();\n\n        if(newProxy != address(0)){\n            uint amount;\n            if(token == address(0)){\n                amount = address(this).balance;\n            }\n            else{\n                amount = IERC20(token).balanceOf(address(this));\n            }\n\n            _transferToken(token, newProxy, amount);\n            IFarm(newProxy).deposit(amount);\n        }\n\n        farms[token] = newProxy;\n    }\n    \n    function deposit(string memory toChain, bytes memory toAddr) payable public {\n        _depositToken(address(0), toChain, toAddr, msg.value, \"\");\n    }\n\n    function deposit(string memory toChain, bytes memory toAddr, bytes memory data) payable public {\n        require(data.length != 0);\n        _depositToken(address(0), toChain, toAddr, msg.value, data);\n    }\n    \n    function depositToken(address token, string memory toChain, bytes memory toAddr, uint amount) public {\n        _depositToken(token, toChain, toAddr, amount, \"\");\n    }\n\n    function depositToken(address token, string memory toChain, bytes memory toAddr, uint amount, bytes memory data) public {\n        require(data.length != 0);\n        _depositToken(token, toChain, toAddr, amount, data);\n    }\n\n    function _depositToken(address token, string memory toChain, bytes memory toAddr, uint amount, bytes memory data) private onlyActivated {\n        require(isValidChain[getChainId(toChain)]);\n        require(amount != 0);\n\n        uint8 decimal;\n        if(token == address(0)){\n            decimal = 18;\n        }\n        else{\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n            decimal = IERC20(token).decimals();\n        }\n        require(decimal \u003e 0);\n\n        address payable farm = farms[token];\n        if(farm != address(0)){\n            _transferToken(token, farm, amount);\n            IFarm(farm).deposit(amount);\n        }\n\n        if(taxRate \u003e 0 \u0026\u0026 taxReceiver != address(0)){\n            uint tax = _payTax(token, amount, decimal);\n            amount = amount.sub(tax);\n        }\n\n        depositCount = depositCount + 1;\n        emit Deposit(toChain, msg.sender, toAddr, token, decimal, amount, depositCount, data);\n    }\n    \n    function depositNFT(address token, string memory toChain, bytes memory toAddr, uint tokenId) public {\n        _depositNFT(token, toChain, toAddr, tokenId, \"\");\n    }\n    \n    function depositNFT(address token, string memory toChain, bytes memory toAddr, uint tokenId, bytes memory data) public {\n        require(data.length != 0);\n        _depositNFT(token, toChain, toAddr, tokenId, data);\n    }\n\n    function _depositNFT(address token, string memory toChain, bytes memory toAddr, uint tokenId, bytes memory data) private onlyActivated {\n        require(isValidChain[getChainId(toChain)]);\n        require(token != address(0));\n        require(IERC721(token).ownerOf(tokenId) == msg.sender);\n\n        IERC721(token).transferFrom(msg.sender, address(this), tokenId);\n        require(IERC721(token).ownerOf(tokenId) == address(this));\n\n        depositCount = depositCount + 1;\n        emit DepositNFT(toChain, msg.sender, toAddr, token, tokenId, 1, depositCount, data);\n    }\n\n    // Fix Data Info\n    ///@param bytes32s [0]:govId, [1]:txHash\n    ///@param uints [0]:amount, [1]:decimal\n    function withdraw(\n        address hubContract,\n        string memory fromChain,\n        bytes memory fromAddr,\n        bytes memory toAddr,\n        bytes memory token,\n        bytes32[] memory bytes32s,\n        uint[] memory uints,\n        bytes memory data,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) public onlyActivated {\n        require(bytes32s.length \u003e= 1);\n        require(uints.length \u003e= 2);\n        require(bytes32s[0] == sha256(abi.encodePacked(hubContract, chain, address(this))));\n        require(isValidChain[getChainId(fromChain)]);\n\n        bytes32 whash = sha256(abi.encodePacked(hubContract, fromChain, chain, fromAddr, toAddr, token, bytes32s, uints, data));\n\n        require(!isUsedWithdrawal[whash]);\n        isUsedWithdrawal[whash] = true;\n\n        uint validatorCount = _validate(whash, v, r, s);\n        require(validatorCount \u003e= IGovernance(governance_()).required());\n\n        address payable _toAddr = bytesToAddress(toAddr);\n        address tokenAddress = bytesToAddress(token);\n\n        if(farms[tokenAddress] != address(0)){ // farmProxy 출금\n            IFarm(farms[tokenAddress]).withdraw(_toAddr, uints[0]);\n        }\n        else{ // 일반 출금\n            _transferToken(tokenAddress, _toAddr, uints[0]);\n        }\n\n        if(isContract(_toAddr) \u0026\u0026 data.length != 0){\n            address _from = bytesToAddress(fromAddr);\n            LibCallBridgeReceiver.callReceiver(true, gasLimitForBridgeReceiver, tokenAddress, uints[0], data, _toAddr, _from);\n        }\n\n        emit Withdraw(fromChain, fromAddr, toAddr, token, bytes32s, uints, data);\n    }\n\n    // Fix Data Info\n    ///@param bytes32s [0]:govId, [1]:txHash\n    ///@param uints [0]:amount, [1]:tokenId\n    function withdrawNFT(\n        address hubContract,\n        string memory fromChain,\n        bytes memory fromAddr,\n        bytes memory toAddr,\n        bytes memory token,\n        bytes32[] memory bytes32s,\n        uint[] memory uints,\n        bytes memory data,\n        uint8[] memory v,\n        bytes32[] memory r,\n        bytes32[] memory s\n    ) public onlyActivated {\n        require(bytes32s.length \u003e= 1);\n        require(uints.length \u003e= 2);\n        require(bytes32s[0] == sha256(abi.encodePacked(hubContract, chain, address(this))));\n        require(isValidChain[getChainId(fromChain)]);\n\n        bytes32 whash = sha256(abi.encodePacked(\"NFT\", hubContract, fromChain, chain, fromAddr, toAddr, token, bytes32s, uints, data));\n\n        require(!isUsedWithdrawal[whash]);\n        isUsedWithdrawal[whash] = true;\n\n        uint validatorCount = _validate(whash, v, r, s);\n        require(validatorCount \u003e= IGovernance(governance_()).required());\n\n        address payable _toAddr = bytesToAddress(toAddr);\n        address tokenAddress = bytesToAddress(token);\n\n        require(IERC721(tokenAddress).ownerOf(uints[1]) == address(this));\n        IERC721(tokenAddress).transferFrom(address(this), _toAddr, uints[1]);\n        require(IERC721(tokenAddress).ownerOf(uints[1]) == _toAddr);\n\n        if(isContract(_toAddr) \u0026\u0026 data.length != 0){\n            address _from = bytesToAddress(fromAddr);\n            LibCallBridgeReceiver.callReceiver(false, gasLimitForBridgeReceiver, tokenAddress, uints[1], data, _toAddr, _from);\n        }\n        \n        emit WithdrawNFT(fromChain, fromAddr, toAddr, token, bytes32s, uints, data);\n    }\n\n    function _validate(bytes32 whash, uint8[] memory v, bytes32[] memory r, bytes32[] memory s) private view returns(uint){\n        uint validatorCount = 0;\n        IGovernance mig = IGovernance(governance_());\n        address[] memory vaList = new address[](mig.getOwners().length);\n\n        uint i=0;\n        uint j=0;\n\n        for(i; i\u003cv.length; i++){\n            address va = ecrecover(whash,v[i],r[i],s[i]);\n            if(mig.isOwner(va)){\n                for(j=0; j\u003cvalidatorCount; j++){\n                    require(vaList[j] != va);\n                }\n\n                vaList[validatorCount] = va;\n                validatorCount += 1;\n            }\n        }\n\n        return validatorCount;\n    }\n\n    function _payTax(address token, uint amount, uint8 decimal) private returns (uint tax) {\n        tax = amount.mul(taxRate).div(10000);\n        if(tax \u003e 0){\n            depositCount = depositCount + 1;\n            emit Deposit(\"ORBIT\", msg.sender, abi.encodePacked(taxReceiver), token, decimal, tax, depositCount, \"\");\n        }\n    }\n\n    function _transferToken(address token, address payable destination, uint amount) private {\n        if(token == address(0)){\n            (bool transfered,) = destination.call{value : amount}(\"\");\n            require(transfered);\n        }\n        else{\n            IERC20(token).safeTransfer(destination, amount);\n        }\n    }\n\n    function isContract(address _addr) private view returns (bool){\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size \u003e 0);\n    }\n\n    function bytesToAddress(bytes memory bys) public pure returns (address payable addr) {\n        assembly {\n            addr := mload(add(bys,20))\n        }\n    }\n\n    receive () external payable { }\n    fallback () external payable { }\n}\n"},"Vault.storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ncontract VaultStorage {\n    string public chain;\n    bool public isActivated = true;\n\n    uint public depositCount = 0;\n\n    mapping(bytes32 =\u003e bool) public isUsedWithdrawal;\n    mapping(bytes32 =\u003e bool) public isValidChain;\n\n    uint public bridgingFee = 0;\n    address payable public feeGovernance;\n\n    mapping(address =\u003e address payable) public farms;\n    uint public taxRate = 10; // 0.01% interval\n    address public taxReceiver = 0xE9f3604B85c9672728eEecf689cf1F0cF7Dd03F2;\n\n    uint public gasLimitForBridgeReceiver;\n}\n"}}