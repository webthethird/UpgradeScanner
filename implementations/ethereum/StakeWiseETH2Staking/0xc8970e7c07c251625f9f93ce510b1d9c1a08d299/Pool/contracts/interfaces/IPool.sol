// SPDX-License-Identifier: AGPL-3.0-only

pragma solidity 0.7.5;
pragma abicoder v2;

import "./IDepositContract.sol";

/**
 * @dev Interface of the Pool contract.
 */
interface IPool {
    /**
    * @dev Event for tracking new pool withdrawal credentials.
    * @param withdrawalCredentials - new withdrawal credentials for the pool validators.
    */
    event WithdrawalCredentialsUpdated(bytes32 withdrawalCredentials);

    /**
    * @dev Event for tracking registered validators.
    * @param publicKey - validator public key.
    * @param operator - address of the validator operator.
    */
    event ValidatorRegistered(bytes publicKey, address operator);

    /**
    * @dev Event for tracking scheduled deposit activation.
    * @param sender - address of the deposit sender.
    * @param validatorIndex - index of the activated validator.
    * @param value - deposit amount to be activated.
    */
    event ActivationScheduled(address indexed sender, uint256 validatorIndex, uint256 value);

    /**
    * @dev Event for tracking activated deposits.
    * @param account - account the deposit was activated for.
    * @param validatorIndex - index of the activated validator.
    * @param value - amount activated.
    * @param sender - address of the transaction sender.
    */
    event Activated(address indexed account, uint256 validatorIndex, uint256 value, address indexed sender);

    /**
    * @dev Event for tracking activated validators updates.
    * @param activatedValidators - new total amount of activated validators.
    * @param sender - address of the transaction sender.
    */
    event ActivatedValidatorsUpdated(uint256 activatedValidators, address sender);

    /**
    * @dev Event for tracking updates to the minimal deposit amount considered for the activation period.
    * @param minActivatingDeposit - new minimal deposit amount considered for the activation.
    * @param sender - address of the transaction sender.
    */
    event MinActivatingDepositUpdated(uint256 minActivatingDeposit, address sender);

    /**
    * @dev Event for tracking pending validators limit.
    * When it's exceeded, the deposits will be set for the activation.
    * @param pendingValidatorsLimit - pending validators percent limit.
    * @param sender - address of the transaction sender.
    */
    event PendingValidatorsLimitUpdated(uint256 pendingValidatorsLimit, address sender);

    /**
    * @dev Structure for passing information about new Validator.
    * @param publicKey - BLS public key of the validator, generated by the operator.
    * @param signature - BLS signature of the validator, generated by the operator.
    * @param depositDataRoot - hash tree root of the deposit data, generated by the operator.
    */
    struct Validator {
        bytes publicKey;
        bytes signature;
        bytes32 depositDataRoot;
    }

    /**
    * @dev Function for upgrading the Pools contract.
    * @param _oracles - address of the Oracles contract.
    * @param _activatedValidators - initial amount of activated validators.
    * @param _pendingValidators - initial amount of pending validators.
    * @param _minActivatingDeposit - minimal deposit in Wei to be considered for the activation period.
    * @param _pendingValidatorsLimit - pending validators percent limit. If it's not exceeded tokens can be minted immediately.
    */
    function upgrade(
        address _oracles,
        uint256 _activatedValidators,
        uint256 _pendingValidators,
        uint256 _minActivatingDeposit,
        uint256 _pendingValidatorsLimit
    ) external;

    /**
    * @dev Function for getting the total amount of pending validators.
    */
    function pendingValidators() external view returns (uint256);

    /**
    * @dev Function for retrieving the total amount of activated validators.
    */
    function activatedValidators() external view returns (uint256);

    /**
    * @dev Function for getting the withdrawal credentials used to
    * initiate pool validators withdrawal from the beacon chain.
    */
    function withdrawalCredentials() external view returns (bytes32);

    /**
    * @dev Function for getting the minimal deposit amount considered for the activation.
    */
    function minActivatingDeposit() external view returns (uint256);

    /**
    * @dev Function for getting the pending validators percent limit.
    * When it's exceeded, the deposits will be set for the activation.
    */
    function pendingValidatorsLimit() external view returns (uint256);

    /**
    * @dev Function for getting the amount of activating deposits.
    * @param account - address of the account to get the amount for.
    * @param validatorIndex - index of the activated validator.
    */
    function activations(address account, uint256 validatorIndex) external view returns (uint256);

    /**
    * @dev Function for setting minimal deposit amount considered for the activation period.
    * @param _minActivatingDeposit - new minimal deposit amount considered for the activation.
    */
    function setMinActivatingDeposit(uint256 _minActivatingDeposit) external;

    /**
    * @dev Function for changing withdrawal credentials.
    * @param _withdrawalCredentials - new withdrawal credentials for the pool validators.
    */
    function setWithdrawalCredentials(bytes32 _withdrawalCredentials) external;

    /**
    * @dev Function for changing the total amount of activated validators.
    * @param _activatedValidators - new total amount of activated validators.
    */
    function setActivatedValidators(uint256 _activatedValidators) external;

    /**
    * @dev Function for changing pending validators limit.
    * @param _pendingValidatorsLimit - new pending validators limit. When it's exceeded, the deposits will be set for the activation.
    */
    function setPendingValidatorsLimit(uint256 _pendingValidatorsLimit) external;

    /**
    * @dev Function for checking whether validator index can be activated.
    * @param _validatorIndex - index of the validator to check.
    */
    function canActivate(uint256 _validatorIndex) external view returns (bool);

    /**
    * @dev Function for retrieving the validator registration contract address.
    */
    function validatorRegistration() external view returns (IDepositContract);

    /**
    * @dev Function for adding deposits to the pool.
    */
    function addDeposit() external payable;

    /**
    * @dev Function for minting account's tokens for the specific validator index.
    * @param _account - account address to activate the tokens for.
    * @param _validatorIndex - index of the activated validator.
    */
    function activate(address _account, uint256 _validatorIndex) external;

    /**
    * @dev Function for minting account's tokens for the specific validator indexes.
    * @param _account - account address to activate the tokens for.
    * @param _validatorIndexes - list of activated validator indexes.
    */
    function activateMultiple(address _account, uint256[] calldata _validatorIndexes) external;

    /**
    * @dev Function for registering new pool validator.
    * @param _validator - validator to register.
    */
    function registerValidator(Validator calldata _validator) external;
}
